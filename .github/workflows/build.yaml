name: Manual C++ Build

on:
  workflow_dispatch:  # Manual trigger only

jobs:
  clang-format-check:
    name: Clang Format Check
    runs-on: ubuntu-latest
    container:
      image: egorpristanskiy/ci_base:latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Run clang-format check
        run: |
          # Find all C++ source and header files
          FILES=$(find . \( -name '*.cpp' -o -name '*.h' -o -name '*.hpp' -o -name '*.cc' \))
          # Run clang-format in dry-run mode with error on diff
          clang-format-19 --dry-run --Werror $FILES
  build:
    runs-on: ubuntu-latest
    needs: clang-format-check
    env:
      HOME: /root

    container:
      image: egorpristanskiy/ci_base:latest   # Your custom Docker image with dev tools

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Conan dependencies
        run: |
          conan install . --output-folder=build --build=missing -s build_type=Release

      - name: Configure with CMake
        run: |
          cmake --preset=conan-release

      - name: Build project
        run: |
          cmake --build --preset=conan-release -j$(nproc)

      - name: Package project
        run: |
          cmake --build --preset=conan-release --target package

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: my-cpp-package
          path: |
            build/build-release/*.deb

  build_with_tests_and_run:
    runs-on: ubuntu-latest
    needs: clang-format-check
    env:
      HOME: /root

    container:
      image: egorpristanskiy/ci_base:latest   # Your custom Docker image with dev tools

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Conan dependencies
        run: |
          conan install . --output-folder=build --build=missing -s build_type=Release

      - name: Configure with CMake
        run: |
          cmake --preset=conan-release -DENABLE_TESTS=ON

      - name: Build project with tests
        run: |
          cmake --build --preset=conan-release -j$(nproc)

      - name: Run tests
        run: |
          ctest --preset=conan-release --output-on-failure
