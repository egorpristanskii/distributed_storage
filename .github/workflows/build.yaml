name: Manual C++ Build

on:
  workflow_dispatch:  # Manual trigger only

jobs:
  clang-format-check:
    name: Clang Format Check
    runs-on: ubuntu-latest
    container:
      image: egorpristanskiy/ci_base:latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Run clang-format check
        run: |
          # Find all C++ source and header files
          FILES=$(find . \( -name '*.cpp' -o -name '*.h' -o -name '*.hpp' -o -name '*.cc' \))
          # Run clang-format in dry-run mode with error on diff
          clang-format-19 --dry-run --Werror $FILES
  build:
    runs-on: ubuntu-latest
    needs: clang-format-check
    env:
      HOME: /root

    container:
      image: egorpristanskiy/ci_base:latest   # Your custom Docker image with dev tools

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Conan dependencies
        run: |
          conan install . --output-folder=build --build=missing -s build_type=Release

      - name: Configure with CMake
        run: |
          cmake --preset=conan-release

      - name: Build project
        run: |
          cmake --build --preset=conan-release -j$(nproc)

      - name: Package project
        run: |
          cmake --build --preset=conan-release --target package

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: kvstorage-deb-package
          path: |
            build/build-release/*.deb
      - name: Upload build results
        uses: actions/upload-artifact@v4
        with:
          name: build-results
          path: |
            build/build-release

  build_with_tests_and_run:
    runs-on: ubuntu-latest
    needs: clang-format-check
    env:
      HOME: /root

    container:
      image: egorpristanskiy/ci_base:latest   # Your custom Docker image with dev tools

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Conan dependencies
        run: |
          conan install . --output-folder=build --build=missing -s build_type=Release

      - name: Configure with CMake
        run: |
          cmake --preset=conan-release -DENABLE_TESTS=ON

      - name: Build project with tests
        run: |
          cmake --build --preset=conan-release -j$(nproc)

      - name: Run tests
        run: |
          ctest --preset=conan-release --output-on-failure
  
  clang_tidy:
    runs-on: ubuntu-latest
    needs: build
    container:
      image: egorpristanskiy/ci_base:latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Conan dependencies
        run: |
          conan install . --output-folder=build --build=missing -s build_type=Release

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: build-results
          path: build/build-release

      - name: Run clang-tidy
        run: |
          run-clang-tidy-19  -p build/build-release -j$(nproc) 

  test_and_coverage:
    runs-on: ubuntu-latest
    needs: clang-format-check
    env:
      HOME: /root
    container:
      image: egorpristanskiy/ci_base:latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Conan dependencies
        run: |
          conan install . --output-folder=build --build=missing -s build_type=Debug

      - name: Configure with CMake for tests and coverage
        run: |
          cmake --preset=conan-debug -DENABLE_TESTS=ON -DCODE_COVERAGE=ON

      - name: Build project with tests and coverage
        run: |
          cmake --build --preset=conan-debug -j$(nproc)

      - name: Run tests with coverage
        env:
          LLVM_PROFILE_FILE: "coverage-%p.profraw"
        run: |
          ctest --preset=conan-debug --output-on-failure

      - name: Generate coverage report
        run: |
          llvm-profdata-19 merge -sparse ./build/build-debug/tests/coverage-*.profraw -o ./build/build-debug/tests/coverage.profdata
          llvm-cov-19 show ./build/build-debug/tests/storageTests -instr-profile=./build/build-debug/tests/coverage.profdata -format=html -output-dir=coverage-report -ignore-filename-regex='tests/'

      - name: Upload HTML Coverage Report
        uses: actions/upload-artifact@v4
        with:
          name: html-coverage-report
          path: coverage-report

  build_application_container:
    runs-on: ubuntu-latest
    needs: 
      - build
      - test_and_coverage
      - clang_tidy

    env:
      DEB_PACKAGE: docker-context/kvstorage-1.0.0-Linux.deb

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: kvstorage-deb-package
          path: docker/docker-context

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: egorpristanskiy
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build container
        run: |
          docker compose -f ./docker/docker-compose.extended.yml build kvstorage

      - name: Tag image
        run: docker tag egorpristanskiy/kvstorage egorpristanskiy/kvstorage:latest

      - name: Push image
        run: docker push egorpristanskiy/kvstorage:latest
